import{F as T,ak as b,H as X}from"./index.D5LvTkl4.js";class Y{constructor(e){this.mindMap=e.mindMap,this.isMousedown=!1,this.mousedownPos={x:0,y:0},this.startViewPos={x:0,y:0},this.currentState=null}calculationMiniMap(e,i){let{svg:o,rect:t,origWidth:m,origHeight:c,scaleX:p,scaleY:x}=this.mindMap.getSvgData({ignoreWatermark:!0});const r=this.mindMap.elRect;t.x-=r.left,t.x2-=r.left,t.y-=r.top,t.y2-=r.top;let M=e/i,a=0,n=0;M>t.ratio?(n=i,a=t.ratio*n):(a=e,n=a/t.ratio);let u=a/t.width,l=(e-a)/2,h=(i-n)/2,w=t.width*p,f=t.height*x,g=(w-t.width)/2,y=(f-t.height)/2,B=t.x-g,P=t.x2+g,V=t.y-y,S=t.y2+y,s={left:0,top:0,right:0,bottom:0};s.left=Math.max(0,-B/w*a)+l,s.right=Math.max(0,(P-m)/w*a)+l,s.top=Math.max(0,-V/f*n)+h,s.bottom=Math.max(0,(S-c)/f*n)+h,s.top>h+n&&(s.top=h+n),s.left>l+a&&(s.left=l+a),Object.keys(s).forEach(d=>{s[d]=s[d]+"px"}),this.removeNodeContent(o);const v=o.svg();return this.currentState={viewBoxStyle:{...s},miniMapBoxScale:u,miniMapBoxLeft:l,miniMapBoxTop:h},{getImgUrl:async d=>{const _=await this.mindMap.doExport.fixSvgStrAndToBlob(v);d(_)},svgHTML:v,viewBoxStyle:s,miniMapBoxScale:u,miniMapBoxLeft:l,miniMapBoxTop:h}}removeNodeContent(e){if(e.hasClass("smm-node")){let o=e.findOne(".smm-node-shape"),t=o.attr("fill");(T(t)||b(t))&&o.attr("fill",X(this.mindMap.themeConfig)),e.clear(),e.add(o);return}let i=e.children();i&&i.length>0&&i.forEach(o=>{this.removeNodeContent(o)})}onMousedown(e){this.isMousedown=!0,this.mousedownPos={x:e.clientX,y:e.clientY};let i=this.mindMap.view.getTransformData();this.startViewPos={x:i.state.x,y:i.state.y}}onMousemove(e,i=5){if(!this.isMousedown||this.isViewBoxMousedown)return;let o=e.clientX-this.mousedownPos.x,t=e.clientY-this.mousedownPos.y;this.mindMap.view.translateXTo(o*i+this.startViewPos.x),this.mindMap.view.translateYTo(t*i+this.startViewPos.y)}onMouseup(){this.isMousedown=!1,this.isViewBoxMousedown=!1}onViewBoxMousedown(e){this.isViewBoxMousedown=!0,this.mousedownPos={x:e.clientX,y:e.clientY};let i=this.mindMap.view.getTransformData();this.startViewPos={x:i.state.x,y:i.state.y}}onViewBoxMousemove(e){if(!this.isViewBoxMousedown||!this.currentState||this.isMousedown)return;let i=e.clientX-this.mousedownPos.x,o=e.clientY-this.mousedownPos.y;const{viewBoxStyle:t,miniMapBoxScale:m,miniMapBoxLeft:c,miniMapBoxTop:p}=this.currentState,x=Math.max(c,Number.parseFloat(t.left)+i),r=Math.max(c,Number.parseFloat(t.right)-i),M=Math.max(p,Number.parseFloat(t.top)+o),a=Math.max(p,Number.parseFloat(t.bottom)-o);this.mindMap.emit("mini_map_view_box_position_change",{left:x+"px",right:r+"px",top:M+"px",bottom:a+"px"}),this.mindMap.view.translateXTo(-i/m+this.startViewPos.x),this.mindMap.view.translateYTo(-o/m+this.startViewPos.y)}}Y.instanceName="miniMap";export{Y as default};
